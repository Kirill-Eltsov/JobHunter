import telegram
from services.database import DatabaseHandler
from services.hh_service import fetch_vacancies
from datetime import datetime
import asyncio

from utils.logger import log_info

async def check_new_vacancies(bot: telegram.Bot):
    db = DatabaseHandler()
    subscriptions = db.get_all_subscriptions()
    for sub in subscriptions:
        params = {
            "keyword": sub['position'],
            "area": sub['city_id'],
            "salary_from": sub['salary_min'],
            "salary_to": sub['salary_max'],
            "date_from": sub['last_vacancy_time'].strftime("%Y-%m-%dT%H:%M:%S+0500") if sub['last_vacancy_time'] else None,  # HH.ru –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DDThh:mm:ss¬±hhmm"
        }
        new_vacancies = await fetch_vacancies(**params)
        log_info(f"–ù–∞–π–¥–µ–Ω–æ {new_vacancies['found']} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ")
        if new_vacancies['found'] != 0:
            db.update_last_vacancy_time(sub['id'])
            await send_notification(sub["user_id"], new_vacancies, bot)


async def send_notification(
    user_id: int,
    vacancies: list[dict],
    bot: telegram.Bot
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    :param vacancies: –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"title": str, "url": str, ...}, ...]
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
    :return: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not vacancies:
        return True  # –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π - –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines = [
            "üîî <b>–ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –≤–∞—Å:</b>",
            *[f"<a href='{vac['alternate_url']}'>{vac['name']}</a>" for vac in vacancies["items"]],
            f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {vacancies['found']}"
        ]
        message = "\n".join(message_lines)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode=telegram.constants.ParseMode.HTML,
            disable_web_page_preview=True
        )
        return True

    except telegram.error.BadRequest as e:
        print(f"User {user_id} blocked the bot or chat doesn't exist: {e}")
    except Exception as e:
        print(f"Error sending notification to user {user_id}: {e}")
    
    return False

async def periodic_checker(application):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π"""
    while True:
        try:
            log_info(f"–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π...")
            await check_new_vacancies(application.bot)  # –ü–µ—Ä–µ–¥–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
        except Exception as e:
            print(f"Error in periodic_checker: {e}")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

async def post_init(application):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞"""
    asyncio.create_task(periodic_checker(application))