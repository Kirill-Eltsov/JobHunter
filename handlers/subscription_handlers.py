from typing import Dict, List, Optional
from datetime import datetime
from telegram import KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler
from services.database import DatabaseHandler
from utils.parse_salary import parse_salary

async def add_subscription_handler(
    db: DatabaseHandler,
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Handle subscription addition """
    position = context.user_data["position"]
    if not position:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π")
        return ConversationHandler.END

    salary_from, salary_to = parse_salary(context.user_data.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'))
    salary_min=salary_from
    salary_max=salary_to
    location=context.user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    user_id = update.effective_user.id
    success = db.add_subscription(
        user_id=user_id,
        position=position,
        salary_min=salary_min,
        salary_max=salary_max,
        location=location
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    salary_range = ""
    if salary_min is not None or salary_max is not None:
        min_salary = str(salary_min) if salary_min is not None else "?"
        max_salary = str(salary_max) if salary_max is not None else "?"
        salary_range = f" —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π {min_salary} - {max_salary}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
    location_text = f" –≤ {location}" if location else ""
    
    keyboard = [
        [KeyboardButton("–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π")],
        [KeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
        [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞")],
        [
            KeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), 
            KeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∏")
        ]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    if success:
        await update.message.reply_text(
            f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö {position}{salary_range}{location_text}",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup

        )
    

async def list_subscriptions_handler(
    db: DatabaseHandler,
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Handle subscription listing and send response directly to user"""
    user_id = update.effective_user.id
    subscriptions = db.get_active_subscriptions(user_id)
    
    if not subscriptions:
        await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫')
        return
    
    message_text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    for index, sub in enumerate(subscriptions, start=1):
        message_text += (
            f"{index}. üîπ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {sub['position']}\n"
            f"   üìç –õ–æ–∫–∞—Ü–∏—è: {sub['location'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {sub['salary_min'] or '?'}-{sub['salary_max'] or '?'}\n"
            f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {sub['created_at'].strftime('%d.%m.%Y')}\n\n"
    )
    
    await update.message.reply_text(
        text=message_text,
        parse_mode='Markdown'
    )

async def remove_subscription_handler(
    db: DatabaseHandler,
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    subscription_id: int
) -> Dict[str, str]:
    """Handle subscription removal"""
    query = update.callback_query
    await query.answer()

    success = db.remove_subscription(subscription_id)
    return {
        'success': success,
        'message': '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞!' if success else '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏'
    }

async def clear_subscriptions_handler(
    db: DatabaseHandler,
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> Dict[str, str]:
    """Handle clearing all subscriptions"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    success = db.clear_all_subscriptions(user_id)
    return {
        'success': success,
        'message': '‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã!' if success else '‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫'
    }