from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.logger import log_warning


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_message = (rf"""
    –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!üëãüéâ
–Ø –í–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –í–∞–º —Å –ø–æ–∏—Å–∫–æ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –±–∏—Ä–∂–µ —Ç—Ä—É–¥–∞ HeadHunter!
    """)

    keyboard = [
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π", callback_data='choose_vacancies')],
        [InlineKeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='select')],
        [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", callback_data='search_history')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    log_warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_html(text=welcome_message, reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'choose_vacancies':
        await show_city_selection(query)


async def show_city_selection(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π."""
    keyboard = [
        [InlineKeyboardButton("–ú–æ—Å–∫–≤–∞", callback_data='city_moscow')],
        [InlineKeyboardButton("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data='city_spb')],
        [InlineKeyboardButton("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", callback_data='city_ekb')],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data='city_other')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:", reply_markup=reply_markup)


async def city_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith('city_'):
        city = query.data.split('_')[1]
        context.user_data['city'] = city  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–Ω–æ
        await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {city}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.")
        await show_position_selection(query)


async def show_position_selection(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π."""
    keyboard = [
        [InlineKeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", callback_data='position_developer')],
        [InlineKeyboardButton("–î–∏–∑–∞–π–Ω–µ—Ä", callback_data='position_designer')],
        [InlineKeyboardButton("–ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data='position_manager')],
        [InlineKeyboardButton("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data='position_other')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:", reply_markup=reply_markup)


async def handle_position_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith('position_'):
        if query.data == 'position_other':
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
            return  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        position = query.data.split('_')[1]
        context.user_data['position'] = position  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ show_salary_selection
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É.")
        await show_salary_selection(update)


async def handle_position_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    position = update.message.text
    context.user_data['position'] = position  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ show_salary_selection
    await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É.")
    await show_salary_selection(update)


async def show_salary_selection(update):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –∂–µ–ª–∞–µ–º–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã."""
    keyboard = [
        [InlineKeyboardButton("–ù–µ –≤–∞–∂–Ω–æ", callback_data='salary_any')],
        [InlineKeyboardButton("0-30,000", callback_data='salary_0_30000')],
        [InlineKeyboardButton("30,000-60,000", callback_data='salary_30000_60000')],
        [InlineKeyboardButton("60,000-100,000", callback_data='salary_60000_100000')],
        [InlineKeyboardButton("–ë–æ–ª–µ–µ 100,000", callback_data='salary_100000_plus')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É:", reply_markup=reply_markup)


async def salary_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith('salary_'):
        salary = query.data.split('_')[1:]
        salary_range = " ".join(salary).replace("_", "-")
        await query.edit_message_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É: {salary_range}. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π.")
        context.user_data['salary'] = salary_range  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
