from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from utils.logger import log_warning, log_info, log_error
from services.hh_service import fetch_vacancies, parse_vacancies

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
CITY, POSITION, SALARY, SEARCH = range(4)

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
CITIES = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö–∞–∑–∞–Ω—å"]
# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
POSITIONS = ["–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–î–∏–∑–∞–π–Ω–µ—Ä", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ê–Ω–∞–ª–∏—Ç–∏–∫", "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫"]
# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç
SALARY_RANGES = ["–ù–µ –≤–∞–∂–Ω–æ", "0-30,000", "30,000-60,000", "60,000-100,000", "–ë–æ–ª–µ–µ 100,000"]

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏ –∏—Ö ID –≤ API HH.ru
CITY_IDS = {
    "–º–æ—Å–∫–≤–∞": "1",
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "2",
    "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "3",
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "4",
    "–∫–∞–∑–∞–Ω—å": "88"
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    welcome_message = (rf"""
    –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!üëãüéâ
–Ø –í–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –í–∞–º —Å –ø–æ–∏—Å–∫–æ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –±–∏—Ä–∂–µ —Ç—Ä—É–¥–∞ HeadHunter!
    """)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [KeyboardButton("–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π")],
        [KeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
        [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    log_warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_html(text=welcome_message, reply_markup=reply_markup)
    return ConversationHandler.END


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π'."""
    message_text = update.message.text
    
    if message_text == "–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π":
        await show_city_selection(update, context)
        return CITY
    elif message_text == "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
        return ConversationHandler.END
    elif message_text == "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
        return ConversationHandler.END
    else:
        return ConversationHandler.END


async def show_city_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π."""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤
    keyboard = [[KeyboardButton(city)] for city in CITIES]
    keyboard.append([KeyboardButton("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:", reply_markup=reply_markup)


async def city_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞."""
    city = update.message.text
    
    if city == "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        context.user_data['awaiting_custom_city'] = True
        return CITY
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    context.user_data['city'] = city
    context.user_data['city_id'] = CITY_IDS.get(city.lower(), None)
    
    await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {city}")
    await show_position_selection(update, context)
    return POSITION


async def custom_city_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
    city = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    context.user_data['city'] = city
    context.user_data['city_id'] = CITY_IDS.get(city.lower(), None)
    
    await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {city}")
    await show_position_selection(update, context)
    return POSITION


async def show_position_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π."""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    keyboard = [[KeyboardButton(position)] for position in POSITIONS]
    keyboard.append([KeyboardButton("–î—Ä—É–≥–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:", reply_markup=reply_markup)


async def handle_position_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏."""
    position = update.message.text
    
    if position == "–î—Ä—É–≥–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
        context.user_data['awaiting_custom_position'] = True
        return POSITION
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    context.user_data['position'] = position
    
    await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position}")
    await show_salary_selection(update, context)
    return SALARY


async def handle_position_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏."""
    position = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
    if context.user_data.get('awaiting_custom_city', False):
        context.user_data['awaiting_custom_city'] = False
        return await custom_city_handler(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    if context.user_data.get('awaiting_custom_position', False):
        context.user_data['awaiting_custom_position'] = False
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        context.user_data['position'] = position
        
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position}")
        await show_salary_selection(update, context)
        return SALARY
    
    # –ï—Å–ª–∏ –º—ã –Ω–µ –æ–∂–∏–¥–∞–µ–º –Ω–∏ –≥–æ—Ä–æ–¥, –Ω–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    return await button_handler(update, context)


async def show_salary_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –∂–µ–ª–∞–µ–º–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã."""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞—Ä–ø–ª–∞—Ç
    keyboard = [[KeyboardButton(salary)] for salary in SALARY_RANGES]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É:", reply_markup=reply_markup)


async def salary_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã."""
    salary = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É
    context.user_data['salary'] = salary
    
    await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É: {salary}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
    await search_vacancies(update, context)
    return ConversationHandler.END


async def search_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    city = context.user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    city_id = context.user_data.get('city_id', None)
    position = context.user_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    salary_range = context.user_data.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    await update.message.reply_text(f"–ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:\n"
                                   f"–ì–æ—Ä–æ–¥: {city}\n"
                                   f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
                                   f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_range}\n\n"
                                   f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç—ã
    salary_from = None
    salary_to = None
    
    if salary_range != "–ù–µ –≤–∞–∂–Ω–æ" and salary_range != "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
        try:
            if salary_range == "–ë–æ–ª–µ–µ 100,000":
                salary_from = 100000
            elif "-" in salary_range:
                parts = salary_range.replace(",", "").split("-")
                salary_from = int(parts[0])
                salary_to = int(parts[1])
        except (ValueError, IndexError):
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã: {salary_range}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ API HH.ru
    vacancies_data = await fetch_vacancies(position, city_id, salary_from, salary_to)
    
    if not vacancies_data:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ü–∞—Ä—Å–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    vacancies = parse_vacancies(vacancies_data)
    
    if not vacancies:
        await update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π:")
    
    for i, vacancy in enumerate(vacancies, 1):
        salary_info = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        if vacancy.get("salary"):
            salary_from = vacancy["salary"].get("from", "")
            salary_to = vacancy["salary"].get("to", "")
            salary_currency = vacancy["salary"].get("currency", "")
            
            if salary_from and salary_to:
                salary_info = f"{salary_from} - {salary_to} {salary_currency}"
            elif salary_from:
                salary_info = f"–æ—Ç {salary_from} {salary_currency}"
            elif salary_to:
                salary_info = f"–¥–æ {salary_to} {salary_currency}"
        
        vacancy_text = (f"{i}. {vacancy['title']}\n"
                        f"–ö–æ–º–ø–∞–Ω–∏—è: {vacancy['company']}\n"
                        f"–ì–æ—Ä–æ–¥: {vacancy['area']}\n"
                        f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_info}\n"
                        f"–°—Å—ã–ª–∫–∞: {vacancy['url']}\n")
        
        await update.message.reply_text(vacancy_text)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [KeyboardButton("–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π")],
        [KeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
        [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏?", 
                                   reply_markup=reply_markup)
